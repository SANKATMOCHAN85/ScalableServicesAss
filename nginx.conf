
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

     #gzip  on;
    ##
# `gzip` Settings
#
#
gzip on;
gzip_disable "msie6";

gzip_vary on;
gzip_proxied any;
gzip_comp_level 6;
gzip_buffers 16 8k;
gzip_http_version 1.1;
gzip_min_length 256;
gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon application/javascript;

# don't send the nginx version number in error pages and Server header

server_tokens off;



# config to don't allow the browser to render the page inside an frame or iframe

# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking

# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri

# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options

add_header X-Frame-Options SAMEORIGIN;



# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,

# to disable content-type sniffing on some browsers.

# https://www.owasp.org/index.php/List_of_useful_HTTP_headers

# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx

# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx

# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020

add_header X-Content-Type-Options nosniff;



# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.

# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for 

# this particular website if it was disabled by the user.

# https://www.owasp.org/index.php/List_of_useful_HTTP_headers

add_header X-XSS-Protection "1; mode=block";



# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),

# you can tell the browser that it can only download content from the domains you explicitly allow

# http://www.html5rocks.com/en/tutorials/security/content-security-policy/

# https://www.owasp.org/index.php/Content_Security_Policy

# I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'

# directives for css and js(if you have inline css or js, you will need to keep it too).

# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful

add_header Content-Security-Policy "frame-src 'none'";



#https://www.owasp.org/index.php/OWASP_Secure_Headers_Project#tab=Headers

add_header X-Permitted-Cross-Domain-Policies none;	


#https://www.owasp.org/index.php/OWASP_Secure_Headers_Project#fp
#The Feature-Policy header allows developers to selectively enable and disable use of various browser features and APIs..
add_header Feature-Policy "microphone 'none'; payment 'none'; sync-xhr 'self' ";



# config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security

  # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping

  # also https://hstspreload.org/

  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";
  
  
 # When a user clicks a link on one site, the origin, that takes them to another site, the destination, the destination site receives information about the

 #origin the user came from.  https://scotthelme.co.uk/a-new-security-header-referrer-policy/
 
  add_header Referrer-Policy "no-referrer";





# Expires map

map $sent_http_content_type $expires {

    default                    off;

    text/html                  epoch;

    text/css                   max;

    application/javascript     max;

    ~image/                    max;

}





    server {
        listen       80;
        server_name  localhost;


		 expires $expires;
		 
	

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /ui/dist;
            index  index.html index.htm;
			try_files $uri $uri/ /index.html?$args;
        }

		location /stream/ {
             #proxy_pass http://din13001733:8000/;
			 #proxy_pass http://din13001943:8000/;
             
		}
        location /url/ {
             #proxy_pass http://din13001733:8000/;
			 #proxy_pass http://din13001943:8000/;
             
		}		
		
		location /api/ {
			#proxy_pass https://api.chucknorris.io/;
			#proxy_pass http://localhost:3001/api/;
			proxy_pass http://52.42.252.156:8080/riser-api/1.0/api/;
		}
		
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}

